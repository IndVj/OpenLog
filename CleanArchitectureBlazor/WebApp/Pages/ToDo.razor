@page "/todo"
@using Core.Application.Interfaces.Services
@using Core.Domain.Entities
@inject IToDoService todoService;

<PageTitle>To-Do List</PageTitle>

<h3>To-Do List</h3>

<div class="todo-container">
    <div class="todo-header">
        <input @bind="newTitle" placeholder="Add a new task..." class="todo-input" />
        <button @onclick="@(() => Add(newTitle))" class="todo-add-btn">Add</button>
    </div>

    @if (itemList.Count > 0)
    {
        <ul class="todo-list">
            @foreach (var item in itemList)
            {
                <li class="todo-item">
                    <input type="checkbox" @bind="item.IsCompleted" class="todo-checkbox" />
                    <span class="@Check(item)">@item.Title</span>
                    <button @onclick="@(() => Remove(item))" class="todo-delete-btn">×</button>
                </li>
            }
        </ul>    
    }
    else
    {
        <div class="empty-state">No tasks available. Add one above!</div>
    }


</div>


@code {
    private List<ToDoItem> itemList = new List<ToDoItem>();
    private string newTitle = string.Empty;

    protected override async Task OnInitializedAsync() 
    { 

        var getTodoItemsResult = await todoService.GetToDoItems();
        itemList = getTodoItemsResult.Value;
    }

    private async Task Add(string newTitleToBeAdded)
    {
        await todoService.AddItem(newTitleToBeAdded);
    }

    private async Task Check(ToDoItem item)
    {
        await todoService.UpdateItem(item.Id,item.Title,true);
    }

    private async Task Remove(ToDoItem item)
    {
        await todoService.RemoveItem(item);
    }


   

}
